import streamlit as st
from google import genai
from google.genai.errors import APIError
import os # D√πng ƒë·ªÉ l·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng

# --- C·∫•u h√¨nh API v√† M√¥ h√¨nh ---
# L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng. R·∫•t quan tr·ªçng cho b·∫£o m·∫≠t!
# ƒê·∫£m b·∫£o b·∫°n ƒë√£ ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng t√™n l√† 'GEMINI_API_KEY'
api_key = os.getenv("GEMINI_API_KEY")

if not api_key:
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng. Vui l√≤ng thi·∫øt l·∫≠p!")
else:
    try:
        # Kh·ªüi t·∫°o client c·ªßa Gemini
        client = genai.Client(api_key=api_key)
        
        # Ch·ªçn m√¥ h√¨nh ph√π h·ª£p cho t√°c v·ª• chat
        MODEL_NAME = "gemini-2.5-flash"
        
        # --- Thi·∫øt l·∫≠p Chat Session (Quan tr·ªçng cho vi·ªác duy tr√¨ l·ªãch s·ª≠) ---
        # Ki·ªÉm tra xem 'chat' session ƒë√£ t·ªìn t·∫°i trong st.session_state ch∆∞a
        # N·∫øu ch∆∞a, t·∫°o m·ªôt session chat m·ªõi
        if "chat" not in st.session_state:
            try:
                # Kh·ªüi t·∫°o m·ªôt phi√™n chat (chat session) m·ªõi
                st.session_state.chat = client.chats.create(model=MODEL_NAME)
                st.session_state.messages = [] # L∆∞u tr·ªØ l·ªãch s·ª≠ tin nh·∫Øn cho hi·ªÉn th·ªã
                
            except APIError as e:
                st.error(f"L·ªói kh·ªüi t·∫°o chat session v·ªõi Gemini: {e}")
                st.session_state.chat = None # ƒê·∫£m b·∫£o kh√¥ng g·ªçi chat n·∫øu c√≥ l·ªói
                
            except Exception as e:
                st.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi t·∫°o chat session: {e}")
                st.session_state.chat = None
                
    except Exception as e:
        st.error(f"L·ªói kh·ªüi t·∫°o Gemini Client: {e}")
        client = None # ƒê·∫£m b·∫£o kh√¥ng g·ªçi client n·∫øu c√≥ l·ªói

# --- Giao di·ªán Streamlit (Gi·ªØ nguy√™n c√°c ƒëo·∫°n m√£ kh√°c, th√™m khung chat) ---

st.title("·ª®ng d·ª•ng Streamlit v·ªõi Chatbox Gemini ü§ñüí¨")

# Gi·∫£ ƒë·ªãnh ƒë√¢y l√† ph·∫ßn m√£ c≈© c·ªßa b·∫°n
st.write("ƒê√¢y l√† ph·∫ßn ·ª©ng d·ª•ng Streamlit hi·ªán c√≥ c·ªßa b·∫°n.")
st.metric(label="M·ªôt ch·ªâ s·ªë", value=42, delta=-1.4)
# Th√™m b·∫•t k·ª≥ th√†nh ph·∫ßn Streamlit n√†o kh√°c b·∫°n mu·ªën gi·ªØ l·∫°i ·ªü ƒë√¢y...

# ----------------------------------------------------------------------
# üåü KHUNG CHAT M·ªöI ƒê∆Ø·ª¢C TH√äM V√ÄO üåü
# ----------------------------------------------------------------------

st.markdown("---") # ƒê∆∞·ªùng k·∫ª ngang ph√¢n t√°ch

if st.session_state.get("chat") and client:
    st.subheader("Tr√≤ chuy·ªán c√πng Gemini üß†")
    
    # 1. Hi·ªÉn th·ªã l·ªãch s·ª≠ tin nh·∫Øn ƒë√£ l∆∞u tr·ªØ
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # 2. X·ª≠ l√Ω ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng (User Input)
    if prompt := st.chat_input("H·ªèi Gemini b·∫•t c·ª© ƒëi·ªÅu g√¨..."):
        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ hi·ªÉn th·ªã
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        with st.chat_message("user"):
            st.markdown(prompt)

        # 3. G·ªçi API Gemini v√† x·ª≠ l√Ω ph·∫£n h·ªìi
        with st.chat_message("assistant"):
            with st.spinner("Gemini ƒëang suy nghƒ©..."):
                try:
                    # G·ª≠i tin nh·∫Øn ƒë·∫øn chat session v√† l·∫•y ph·∫£n h·ªìi
                    response = st.session_state.chat.send_message(prompt)
                    
                    # Hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ Gemini
                    st.markdown(response.text)
                    
                    # Th√™m ph·∫£n h·ªìi c·ªßa Gemini v√†o l·ªãch s·ª≠ hi·ªÉn th·ªã
                    st.session_state.messages.append({"role": "assistant", "content": response.text})
                    
                except APIError as e:
                    st.error(f"L·ªói API khi g·ª≠i tin nh·∫Øn: {e}")
                    st.session_state.messages.pop() # X√≥a tin nh·∫Øn ng∆∞·ªùi d√πng ƒë·ªÉ tr√°nh k·∫πt
                except Exception as e:
                    st.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
                    st.session_state.messages.pop()
                    
else:
    # Th√¥ng b√°o n·∫øu kh√¥ng th·ªÉ kh·ªüi t·∫°o chat
    st.info("Kh√¥ng th·ªÉ kh·ªüi t·∫°o khung chat. Vui l√≤ng ki·ªÉm tra API Key v√† k·∫øt n·ªëi.")
